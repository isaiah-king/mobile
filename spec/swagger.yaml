swagger: '2.0'
schemes:
  - http
  - https
host: api.thingful.net
basePath: /
info:
  description: |
    This is the documentation for Thingful's search and access API for Internet of Things devices.
    
    **This draft of the documentation is a design proposal, and is not currently implemented.**

    # Introduction
    This API is documented in **OpenAPI format** and is based on
    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.

    # Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    And that allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
    
    # Versioning
     We strive not to release any breaking changes to the Thingful API, but over time the public API must change and evolve in response to changing requirements of clients or new functionality being added. To minimise the impact of any changes, clients consuming data from the Thingful should send a special version parameter with all requests. This parameter defines a timestamp in YYYYMMDD form, which indicates the most recent version of the API the client application is capable of consuming.

       This parameter can either be supplied via a `version` query parameter, or it can be specified by means of the custom HTTP header: `X-Thingful-Version`.
    
    # Roles
    The Thingful API has the concept of the following roles or scopes:
    
      * write:things
      * read:things
      * write:users
      * read:users
      * write:entitlements
      * read:entitlements
      
    TODO: figure out what the above should be

    # Authentication
    The Thingful API offers three forms of authentication:
      - Bearer authentication
      - Basic authentication
      - API Key authentication

    ## Bearer
    This form of authentication requires sending an `Authorization` header containing the type value `Bearer` followed by your authentication token.

    ## Basic
    Basic authentication allows users to authenticate by sending their username and password.

    ## API Key
    API Key authentication also allows clients to authenticate by sending their authentication token via a url query parameter.

    This is less secure than sending it via a header, as the token value will be included in server logs, so is only included to support clients unable to send HTTP headers.

    <!-- ReDoc-Inject: <security-definitions> -->

  version: 2016.12.01
  title: Thingful
  termsOfService: 'https://thingful.net/site/tos/'
  contact:
    email: support@thingful.net
  x-logo:
    url: 'logo.png'

externalDocs:
  description: The published API specification is available here.
  url: 'https://thingful.github.io/openapi-spec'

tags:
  - name: things
    description: Operations to do with discovering and accessing IoT resources.
  - name: entitlements
    description: Operations to do with entitling third parties to access your data.
  - name: users
    description: Operations to do with user accounts.
  - name: sessions
    description: Operations to do with user sessions.

consumes:
  - 'application/vnd.api+json'

produces:
  - 'application/vnd.api+json'

securityDefinitions:
  bearer_auth:
    description: |
      This scheme relies on authenticating users by having them present a standard `Authorization` header containing the value `Bearer` followed by their API key / authorization token.
    type: apiKey
    name: Authorization
    in: header
  api_key_auth:
    description: |
      For clients unable to send request headers, they can also authenticate by sending their api key or session token via a query parameter.
    type: apiKey
    name: key
    in: query
  basic_auth:
    description: |
      HTTP basic auth can be used.
    type: basic

parameters:
  authorizationHeader:
    name: Authorization
    in: header
    type: string
    description: Standard Authorization header; token should be sent using the `Bearer` format.
  apiKey:
    name: key
    in: query
    type: string
    description: Authorization token can also be sent as a query parameter for clients unable to send valid HTTP headers.
    
paths:
  '/things/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the Thing
        required: true
        type: string
      - $ref: '#/parameters/apiKey'
    get:
      tags:
        - things
      summary: Get a Thing by its ID
      security:
        - basic_auth: []
        - api_key_auth: []
        - bearer_auth: []
      description: |
        This endpoint returns a snapshot of a Thing identified by its ID.
      parameters:
        - $ref: '#/parameters/authorizationHeader'
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              id:
                $ref: '#/definitions/ThingID'
              type:
                type: string
                enum:
                  - thing
              attributes:
                $ref: '#/definitions/ThingAttributes'
        '404':
          $ref: '#/responses/Standard404ErrorResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
  
  '/search':
    get:
      tags:
        - things
      summary: Search things
      description: |
        This is the primary endpoint used for discovering Things
      parameters:
        - name: long
          in: query
          description: Longitude of a point around which to search
          type: number
          minimum: -180
          maximum: 180
          format: float
        - name: lat
          in: query
          description: Latitude of a point around which to search
          type: number
          minimum: -90
          maximum: 90
          format: float
        - name: radius
          in: query
          description: Radius in metres around which to search
          type: number
          format: integer
          minimum: 1
          maximum: 10000
        - name: limit
          in: query
          description: The number of results per page to return
          type: number
          format: integer
          minimum: 1
          maximum: 1000
        - name: sort
          in: query
          description: Parameter that specifies how results are sorted.
          type: string
          enum:
            - score
            - distance
          default: score
        - name: starting-before
          in: query
          description: Parameter used when paginating to navigate to the previous page of results. The value of this parameter is calculated on the server so clients should not expect to be able to infer the value of this parameter, rather they must just use the previous link returned by the server
          type: string
        - name: starting-after
          in: query
          description: Parameter used when paginating to navigate to the next page of results. The value of this parameter is calculated on the server, so clients should not expect to be able to infer the value for this parameter, rather they must just use the next link returned by the server.
          type: string
        - name: q
          in: query
          description: Simple full text search parameter - returns all things containing this term somewhere
          type: string
        - name: adv
          in: query
          description: |
            Advanced query search parameter. The value of this parameter can be used to compose arbitrarily complex search queries by sending a URL encoded JSON object containing the desired search criteria.
            
            Examples:
              * '{"channel":"thingful:unit=celsius"}'
              * '{"channel":"thingful:measure=temperature AND thingful:exposure=outdoor"}'
          type: string
      responses:
        '200':
          description: Search request was ok
        
  '/users':
    post:
      tags:
        - users
      summary: Create a new User
      description: |
        This endpoint allows for new Users to be created. Only authenticated users with the `create:users` role will be able to call this endpoint.
      parameters:
        - name: user
          in: body
          required: true
          description: The new User record to create.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - user
                  attributes:
                    allOf:
                      - $ref: '#/definitions/UserAttributes'
                      - $ref: '#/definitions/UserCreateAttributes'
                    required:
                      - username
                      - email
                      - password
                required:
                  - type
                  - attributes
            required:
              - data

      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/UserResponse'
          headers:
            Location:
              description: This header contains the location of the newly created User resource
              type: string

        '403':
          description: Forbidden
        '422':
          description: Duplicate username detected
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            'application/json':
              errors:
                - status: '422'
                  title: Duplicate username
                  detail: Username is already registered
                  source:
                    pointer: "/data/attributes/username"

  '/users/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: The id of the User
        type: string
    get:
      tags:
        - users
      summary: Get a User
      operationId: getUser
      description: |
        This endpoint returns information about a user.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserResponse'
    patch:
      tags:
        - users
      summary: Update a User
      operationId: updateUser
      description: |
        This endpoint allows for updating a User record with new values.
      parameters:
        - name: user
          in: body
          required: true
          description: The new User record to create.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    $ref: '#/definitions/UserID'
                  type:
                    type: string
                    enum:
                      - user
                  attributes:
                    $ref: '#/definitions/UserAttributes'
                required:
                  - id
                  - type
                  - attributes
            required:
              - data
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserResponse'
    delete:
      tags:
        - users
      summary: Delete a User
      operationId: deleteUser
      description: |
        This endpoint allows deleting a user
      responses:
        '204':
          description: Successful deletion

  '/verify':
    get:
      tags:
        - users
      summary: Verify a User
      operationId: verifyUser
      description: |
        This endpoint allows a client to verify a user account.
      parameters:
        - name: verification_code
          in: query
          required: true
          description: A verification code that has been emailed to a user to confirm their email address
          type: string
      responses:
        '204':
          description: Verification successful
        '404':
          description: Unable to locate the verification

  '/sessions':
    post:
      tags:
        - sessions
      summary: Create a new session token
      operationId: createSession
      description: |
        This endpoint allows creating a new session token for a user by sending their username and password.
      parameters:
        - name: Session
          in: body
          required: true
          description: JSON object to create a session
          schema:
            $ref: '#/definitions/SessionRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            'application/json':
              errors:
                - status: '403'
                  title: Forbidden
                  detail: Invalid authentication credentials were supplied
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorResponse'
          examples:
            'application/json':
              errors:
                - status: '422'
                  title: Unprocessable Entity
                  detail: Missing required attribute to create a session
                  source:
                    pointer: "/data/attributes/password"

  '/sessions/{id}':
    delete:
      tags:
        - sessions
      summary: Delete a session token (i.e. logout)
      operationId: deleteSession
      description: |
        This endpoint allows a client to mark their session token as deleted, which will have the effect of logging them out.
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: The ID of the session to delete
      responses:
        '204':
          description: Session deleted

definitions:
  Tag:
    description: A single metadata fact about a resource
    type: string
    example: thingful:unit=celsius

  Metadata:
    description: A collection of facts about a resource
    type: array
    items:
      $ref: '#/definitions/Tag'
    example:
      - thingful:unit=celsius
      - temperature
      - thingful:parameter=temperature
      
  Longitude:
    description: Decimal longitude value
    type: number
    format: float
    maximum: 180
    minimum: -180
    example: -0.084101
    
  Latitude:
    description: Decimal latitude value
    type: number
    format: float
    maximum: 90
    minimum: -90
    example: 51.5523379
    
  ThingID:
    description: The ID of a thing
    type: string
    example: bj7ajg91

  Location:
    description: A location for a resource
    type: object
    properties:
      longitude:
        $ref: '#/definitions/Longitude'
      latitude:
        $ref: '#/definitions/Latitude'
    required:
      - longitude
      - latitude

  Channel:
    description: A single data channel on a Thing
    type: object
    properties:
      label:
        type: string
        example: tempsensor1
      metadata:
        $ref: '#/definitions/Metadata'
    required:
      - label
      - metadata

  AccessChannel:
    description: Additional properties to be included in an authenticated "access" response
    allOf:
      - $ref: '#/definitions/Channel'
      - type: object
        properties:
          value:
            type: string
            example: '17.2'

  ThingAttributes:
    description: The core attributes of a Thing resource
    type: object
    properties:
      title:
        type: string
        example: My Thermometer
      description:
        type: string
        example: An outdoor temperature sensor
      metadata:
        $ref: '#/definitions/Metadata'
      location:
        $ref: '#/definitions/Location'
      channels:
        type: array
        items:
          $ref: '#/definitions/Channel'
    required:
      - title
      - metadata

  UserResponse:
    description: Response sent back when getting, creating or updating a User
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/UserID'
          type:
            $ref: '#/definitions/UserType'
          attributes:
            $ref: '#/definitions/UserAttributes'
        required:
          - id
          - type
          - attributes
      links:
        type: object
        properties:
          self:
            $ref: '#/definitions/UserSelfLink'
        required:
          - self
    required:
      - data
      - links

  UserID:
    description: The id of a User
    type: string
    example: "172833"

  UserType:
    description: The type of a User
    type: string
    enum:
      - user

  UserSelfLink:
    description: Link to the User
    type: string
    format: url
    example: 'https://api.thingful.net/users/172833'

  UserAttributes:
    description: The shared attributes of a User resource
    type: object
    properties:
      username:
        type: string
        minLength: 3
        description: The unique username of the user. User's can attempt to change this, but this operation will fail if another user has already claimed that username.
        example: ellie123
      name:
        type: string
        description: The user's full name.
        example: Ellie Smith
      email:
        type: string
        format: email
        description: The email address of the user.
        example: elliesmith@example.com

  UserCreateAttributes:
    description: User attributes that only make sense when creating or updating a user. These will never be returned via the API.
    type: object
    properties:
      password:
        type: string
        format: password
        description: A new or updated password for the user.

# Session definitions
# ===================
  SessionID:
    description: The id of a session - used to destroy and logout
    type: string
    example: 4LfnM3RqNQa6xOS192MpVg

  SessionCreationAttributes:
    description: Attributes for creating a new session token for use with the API.
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: The username of the user
        example: ellie123
      password:
        type: string
        format: password

  SessionReturnAttributes:
    description: Additional attributes returned when a new session is created
    type: object
    properties:
      user_id:
        $ref: '#/definitions/UserID'
      expires_at:
        type: string
        format: datetime
        description: The date/time at which this token expires.
        example: '2016-11-11T09:39:03Z'
        readOnly: true
      token:
        type: string
        description: The actual session token, clients must then send back via the `Authorization` header.
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiZXhwIjoxNDc4ODU3MTQzfQ.YuMb_X9Mm0ZygXHkxZ_qpotONaLx2MIi9uw_6K1ncKs
        readOnly: true

  SessionRequest:
    description: Object that is sent to create a new session token
    type: object
    required:
      - data
    properties:
      data:
        type: object
        required:
          - type
          - attributes
        properties:
          type:
            type: string
            enum:
              - session
            description: The type of the request. Must be the string "session"
          attributes:
            allOf:
              - $ref: '#/definitions/SessionCreationAttributes'
            required:
              - username
              - password

  SessionResponse:
    description: Object sent in response to a successful session request
    type: object
    required:
      - data
    properties:
      data:
        type: object
        required:
          - id
          - type
          - attributes
        properties:
          id:
            $ref: '#/definitions/SessionID'
          type:
            type: string
            enum:
              - session
          attributes:
            allOf:
              - $ref: '#/definitions/SessionReturnAttributes'

  ErrorResponse:
    description: Container object for one or more errors returned by the API.
    type: object
    required:
      - errors
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'

  Error:
    description: An error object returned by the API
    type: object
    required:
      - status
      - title
    properties:
      status:
        type: string
        description: The HTTP status code applicable to this problem expressed as a string
      title:
        type: string
        description: Short human-readable summary of the problem
      detail:
        type: string
        description: Optional longer form human-readable explanation tailored to be specific to this occurence of the problem.
      source:
        type: object
        properties:
          pointer:
            type: string
            description: Used to refer to a specific field in any received JSON body in the form of a JSON Pointer, e.g. "/data" for a primary data object or "/data/attributes/title" to refer to the title attribute of the object.
          parameter:
            type: string
            description: A string containing a reference to a specific query parameter that caused the problem
            
  AdvancedQuery:
    description: Object used to make an "advanced" query. This is a normal query sent to the `/search` endpoint but structured so the query can be sent via POST.
    type: object
    properties:
      long:
        type: number
        format: float
        description: The longitude of a point around which to search
        example:  

responses:
  Standard500ErrorResponse:
    description: An unexpected error occurred.
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '500'
            title: Unexpected Error
            detail: An error occurred while saving record to the database

  Standard404ErrorResponse:
    description: The requested resource was not found at the requested location.
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '404'
            title: Not Found
            detail: Unable to locate the requested resource.

  Standard400ErrorResponse:
    description: The client submitted an incorrect or malformed request
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '400'
            title: Bad Request
            detail: Missing required query parameter.
            source:
              parameter: geobound-long

  Standard403ErrorResponse:
    description: The client has requested a forbidden request
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '403'
            title: Forbidden
            detail: You are forbidden from accessing this resource

  Standard422ErrorResponse:
    description: The client request cannot be fulfilled due to invalid content
    schema:
      $ref: '#/definitions/ErrorResponse'
    examples:
      'application/json':
        errors:
          - status: '422'
            title: Duplicate username
            detail: The requested username has already been taken
            source:
              pointer: /data/attributes/username


